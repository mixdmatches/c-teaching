// 所有知识点
export const allPoints = [
  {
    id: 10001,
    sectionId: 1,
    sectionName: 'C语言概述',
    pointId: 1,
    pointName: 'C语言历史',
    context: 'C语言由Dennis Ritchie在20世纪70年代初开发。',
    hierarchy: 1,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10002,
    sectionId: 1,
    sectionName: 'C语言概述',
    pointId: 2,
    pointName: '简单C程序结构',
    context: '包含头文件、主函数main()、函数体、语句结束符;等基本结构',
    hierarchy: 1,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10003,
    sectionId: 1,
    sectionName: 'C语言概述',
    pointId: 3,
    pointName: '编译和运行过程',
    context:
      '源文件（.c） -> 预处理 -> 编译 -> 汇编 -> 链接 -> 可执行文件（.exe等）',
    hierarchy: 1,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10004,
    sectionId: 2,
    sectionName: '数据类型、运算符和表达式',
    pointId: 1,
    pointName: '数据类型',
    context:
      '基本数据类型（整型int、字符型char、浮点型float和double等）、构造数据类型（数组、结构体等）、指针类型、空类型void',
    hierarchy: 1,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10005,
    sectionId: 2,
    sectionName: '数据类型、运算符和表达式',
    pointId: 2,
    pointName: '常量和变量',
    context:
      '常量（整型常量、实型常量、字符常量、字符串常量等），变量（定义、命名规则、初始化）',
    hierarchy: 1,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10006,
    sectionId: 2,
    sectionName: '数据类型、运算符和表达式',
    pointId: 3,
    pointName: '运算符',
    context:
      '算术运算符（+、-、*、/、%等）、关系运算符（>、<、==等）、逻辑运算符（&&、`',
    hierarchy: 1,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10007,
    sectionId: 2,
    sectionName: '数据类型、运算符和表达式',
    pointId: 4,
    pointName: '表达式',
    context:
      '算术表达式、关系表达式、逻辑表达式、赋值表达式等，以及表达式的求值顺序和优先级',
    hierarchy: 1,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10008,
    sectionId: 3,
    sectionName: '顺序结构程序设计',
    pointId: 1,
    pointName: '语句分类',
    context: '表达式语句、函数调用语句、控制语句、复合语句、空语句',
    hierarchy: 1,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10009,
    sectionId: 3,
    sectionName: '顺序结构程序设计',
    pointId: 2,
    pointName: '数据的输入输出\t',
    context:
      '标准输入输出函数printf()和scanf()的使用，包括格式控制字符串和参数列表',
    hierarchy: 1,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10010,
    sectionId: 3,
    sectionName: '顺序结构程序设计',
    pointId: 3,
    pointName: '字符输入输出函数',
    context: 'putchar()用于输出单个字符，getchar()用于输入单个字符',
    hierarchy: 2,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10011,
    sectionId: 4,
    sectionName: '选择结构程序设计',
    pointId: 1,
    pointName: '关系运算和逻辑运算',
    context: '关系运算符和逻辑运算符的优先级和结合性，以及运算结果的真假判断',
    hierarchy: 1,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10012,
    sectionId: 4,
    sectionName: '选择结构程序设计',
    pointId: 2,
    pointName: 'if语句',
    context: '单分支if语句、双分支if - else语句、多分支if - else if - else语句',
    hierarchy: 1,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10013,
    sectionId: 4,
    sectionName: '选择结构程序设计',
    pointId: 3,
    pointName: '嵌套if语句',
    context: '在if语句中嵌套其他if语句，注意else与if的配对规则',
    hierarchy: 2,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10014,
    sectionId: 4,
    sectionName: '选择结构程序设计',
    pointId: 4,
    pointName: 'switch语句',
    context: '多分支选择语句，根据表达式的值选择不同的case分支执行',
    hierarchy: 1,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10015,
    sectionId: 5,
    sectionName: '循环结构程序设计',
    pointId: 1,
    pointName: 'while循环',
    context: '先判断条件，条件为真时执行循环体，直到条件为假',
    hierarchy: 1,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10016,
    sectionId: 5,
    sectionName: '循环结构程序设计',
    pointId: 2,
    pointName: 'do - while循环',
    context: '先执行一次循环体，再判断条件，条件为真时继续循环',
    hierarchy: 1,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10017,
    sectionId: 5,
    sectionName: '循环结构程序设计',
    pointId: 3,
    pointName: 'for循环',
    context:
      '由初始化表达式、循环条件表达式和循环后操作表达式组成，结构紧凑，使用广泛',
    hierarchy: 1,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10018,
    sectionId: 5,
    sectionName: '循环结构程序设计',
    pointId: 4,
    pointName: '循环嵌套',
    context: '在一个循环体内嵌套另一个循环，常见的有二重循环',
    hierarchy: 2,
    difficulty: 3,
    topicId: null,
  },
  {
    id: 10019,
    sectionId: 5,
    sectionName: '循环结构程序设计',
    pointId: 5,
    pointName: '循环控制语句',
    context:
      'break语句用于跳出当前循环，continue语句用于跳过本次循环的剩余部分，继续下一次循环',
    hierarchy: 1,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10020,
    sectionId: 1,
    sectionName: 'C语言概述',
    pointId: 4,
    pointName: 'C标准库',
    context:
      '提供了丰富的函数库，如stdio.h用于输入输出，stdlib.h用于内存分配等。',
    hierarchy: 2,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10021,
    sectionId: 1,
    sectionName: 'C语言概述',
    pointId: 5,
    pointName: '编程风格',
    context:
      '包括代码缩进、命名约定、注释的使用等，有助于提高代码的可读性和维护性。',
    hierarchy: 2,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10022,
    sectionId: 2,
    sectionName: '数据类型、运算符和表达式',
    pointId: 5,
    pointName: '类型转换',
    context: '自动类型转换和强制类型转换',
    hierarchy: 1,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10023,
    sectionId: 2,
    sectionName: '数据类型、运算符和表达式',
    pointId: 6,
    pointName: '复合字面量',
    context: '使用复合字面量初始化结构体或数组，例如(struct Point){0, 0}。',
    hierarchy: 2,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10024,
    sectionId: 3,
    sectionName: '顺序结构程序设计',
    pointId: 4,
    pointName: '格式化输入输出',
    context:
      'printf()和scanf()中的格式说明符及其用法，如%d表示整数，%f表示浮点数。',
    hierarchy: 2,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10025,
    sectionId: 3,
    sectionName: '顺序结构程序设计',
    pointId: 5,
    pointName: '错误处理',
    context:
      '如何通过返回值检查scanf()等函数是否成功执行，以及如何处理输入错误。',
    hierarchy: 2,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10026,
    sectionId: 4,
    sectionName: '选择结构程序设计',
    pointId: 5,
    pointName: '条件运算符',
    context: '三元运算符(条件 ? 表达式1 : 表达式2)，根据条件选择不同的值。',
    hierarchy: 1,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10027,
    sectionId: 4,
    sectionName: '选择结构程序设计',
    pointId: 6,
    pointName: '断言',
    context: '使用assert宏在调试阶段检查条件是否成立，帮助捕捉逻辑错误。',
    hierarchy: 2,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10028,
    sectionId: 5,
    sectionName: '循环结构程序设计',
    pointId: 6,
    pointName: '循环优化技巧',
    context: '如避免在循环体内进行不必要的计算，提前退出循环等优化策略。',
    hierarchy: 2,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10029,
    sectionId: 5,
    sectionName: '循环结构程序设计',
    pointId: 7,
    pointName: '递归',
    context: '函数调用自身来解决问题的一种方法，适用于分治算法等场景。',
    hierarchy: 1,
    difficulty: 3,
    topicId: null,
  },
  {
    id: 10030,
    sectionId: 1,
    sectionName: 'C语言概述',
    pointId: 6,
    pointName: 'C99标准特性',
    context: '包括布尔类型_Bool、变长数组VLA等新特性。',
    hierarchy: 1,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10031,
    sectionId: 1,
    sectionName: 'C语言概述',
    pointId: 7,
    pointName: 'C11标准特性',
    context: '新增了_Thread_local关键字、泛型选择等特性。',
    hierarchy: 2,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10032,
    sectionId: 2,
    sectionName: '数据类型、运算符和表达式',
    pointId: 7,
    pointName: '枚举类型',
    context: '定义一组命名的整数常量，例如enum Color {RED, GREEN, BLUE};',
    hierarchy: 1,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10033,
    sectionId: 2,
    sectionName: '数据类型、运算符和表达式',
    pointId: 8,
    pointName: '联合体',
    context: '一种特殊的数据结构，允许在相同的内存位置存储不同类型的数据。',
    hierarchy: 2,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10034,
    sectionId: 3,
    sectionName: '顺序结构程序设计',
    pointId: 6,
    pointName: '文件包含指令',
    context: '使用#include预处理指令来包含头文件，如#include <stdio.h>。',
    hierarchy: 1,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10035,
    sectionId: 3,
    sectionName: '顺序结构程序设计',
    pointId: 7,
    pointName: '宏定义',
    context: '使用#define定义宏，实现代码片段的替换，简化编程工作。',
    hierarchy: 1,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10036,
    sectionId: 4,
    sectionName: '选择结构程序设计',
    pointId: 7,
    pointName: '条件编译',
    context: '使用#ifdef, #ifndef等条件编译指令，根据条件编译不同的代码段。',
    hierarchy: 2,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10037,
    sectionId: 4,
    sectionName: '选择结构程序设计',
    pointId: 8,
    pointName: '多重选择结构',
    context: '通过嵌套if或switch-case语句实现复杂的选择逻辑。',
    hierarchy: 1,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10038,
    sectionId: 5,
    sectionName: '循环结构程序设计',
    pointId: 8,
    pointName: '循环中的函数调用',
    context: '在循环体内调用函数，注意递归调用可能导致栈溢出。',
    hierarchy: 1,
    difficulty: 3,
    topicId: null,
  },
  {
    id: 10039,
    sectionId: 5,
    sectionName: '循环结构程序设计',
    pointId: 9,
    pointName: '死循环及其用途',
    context: '如while(1)形成的死循环，在服务器端程序中用于持续监听客户端请求。',
    hierarchy: 2,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10040,
    sectionId: 1,
    sectionName: 'C语言概述',
    pointId: 8,
    pointName: '编程规范',
    context: '遵循一定的编码规范有助于提高代码质量和团队协作效率。',
    hierarchy: 1,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10041,
    sectionId: 1,
    sectionName: 'C语言概述',
    pointId: 9,
    pointName: '预处理器指令',
    context:
      '除了#include, 还有#define, #ifdef等预处理器指令用于增强代码灵活性。',
    hierarchy: 1,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10042,
    sectionId: 6,
    sectionName: '数组',
    pointId: 1,
    pointName: '一维数组定义',
    context:
      '用 类型 数组名[常量表达式]; 定义，常量表达式指定元素个数，如 int a[5];',
    hierarchy: 3,
    difficulty: 3,
    topicId: null,
  },
  {
    id: 10043,
    sectionId: 6,
    sectionName: '数组',
    pointId: 2,
    pointName: '一维数组初始化',
    context: '可全部、部分初始化或省略长度，未赋值元素为 0，如 int a[5]={1,2};',
    hierarchy: 4,
    difficulty: 5,
    topicId: null,
  },
  {
    id: 10044,
    sectionId: 6,
    sectionName: '数组',
    pointId: 3,
    pointName: '一维数组元素引用',
    context: '通过下标访问，下标从 0 开始，越界访问可能导致程序出错，如 a[0]',
    hierarchy: 5,
    difficulty: 5,
    topicId: null,
  },
  {
    id: 10045,
    sectionId: 6,
    sectionName: '数组',
    pointId: 4,
    pointName: '一维数组存储结构',
    context: '内存中连续存放，地址依次递增，利于快速访问和遍历数组元素',
    hierarchy: 4,
    difficulty: 3,
    topicId: null,
  },
  {
    id: 10046,
    sectionId: 6,
    sectionName: '数组',
    pointId: 5,
    pointName: '一维数组输入输出',
    context: '结合循环与 scanf、printf 函数，可批量处理数组元素数据',
    hierarchy: 3,
    difficulty: 4,
    topicId: null,
  },
  {
    id: 10047,
    sectionId: 6,
    sectionName: '数组',
    pointId: 6,
    pointName: '二维数组定义',
    context:
      '类型 数组名[行数][列数]; 定义矩阵形式数组，如 int a[2][3];\r\n类型 数组名[行数][列数]; 定义矩阵形式数组，如 int a[2][3];\r\n类型 数组名[行数][列数]; 定义矩阵形式数组，如 int a[2][3];',
    hierarchy: 3,
    difficulty: 4,
    topicId: null,
  },
  {
    id: 10048,
    sectionId: 6,
    sectionName: '数组',
    pointId: 7,
    pointName: '二维数组初始化',
    context:
      '按行或连续初始化，部分初始化剩余元素为 0，如 int a[2][3]={{1,2},{3}};',
    hierarchy: 2,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10049,
    sectionId: 6,
    sectionName: '数组',
    pointId: 8,
    pointName: '二维数组元素引用',
    context: '用 数组名[行下标][列下标] 访问，行列下标均从 0 起，如 a[1][2]',
    hierarchy: 3,
    difficulty: 4,
    topicId: null,
  },
  {
    id: 10050,
    sectionId: 6,
    sectionName: '数组',
    pointId: 9,
    pointName: '字符数组与字符串',
    context: '字符数组可存字符串，以 \'\\0\' 结尾，如 char s[10]="hello";',
    hierarchy: 4,
    difficulty: 3,
    topicId: null,
  },
  {
    id: 10051,
    sectionId: 6,
    sectionName: '数组',
    pointId: 10,
    pointName: '字符串处理函数',
    context: 'strlen 算长度，strcpy 复制，strcmp 比较，strcat 连接字符串',
    hierarchy: 4,
    difficulty: 5,
    topicId: null,
  },
  {
    id: 10052,
    sectionId: 7,
    sectionName: '函数',
    pointId: 1,
    pointName: '函数定义',
    context: '由返回类型、函数名、参数列表和函数体构成，封装特定功能代码块',
    hierarchy: 3,
    difficulty: 3,
    topicId: null,
  },
  {
    id: 10053,
    sectionId: 7,
    sectionName: '函数',
    pointId: 2,
    pointName: '函数调用',
    context: '通过函数名和实参调用，传递数据并执行函数内代码，获返回结果',
    hierarchy: 2,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10054,
    sectionId: 7,
    sectionName: '函数',
    pointId: 3,
    pointName: '参数传递',
    context: '值传递复制实参值，地址传递传地址，可修改实参，灵活处理数据',
    hierarchy: 3,
    difficulty: 4,
    topicId: null,
  },
  {
    id: 10055,
    sectionId: 7,
    sectionName: '函数',
    pointId: 4,
    pointName: '函数返回值',
    context: '用 return 语句返回结果，类型要与定义一致，结束函数执行',
    hierarchy: 4,
    difficulty: 4,
    topicId: null,
  },
  {
    id: 10056,
    sectionId: 7,
    sectionName: '函数',
    pointId: 5,
    pointName: '函数嵌套调用',
    context: '一个函数内调用其他函数，实现复杂功能的分层和模块化设计',
    hierarchy: 3,
    difficulty: 4,
    topicId: null,
  },
  {
    id: 10057,
    sectionId: 7,
    sectionName: '函数',
    pointId: 6,
    pointName: '函数递归调用',
    context: '函数自身调用自身，用于解决可分解为相似子问题的计算任务',
    hierarchy: 3,
    difficulty: 5,
    topicId: null,
  },
  {
    id: 10058,
    sectionId: 7,
    sectionName: '函数',
    pointId: 7,
    pointName: '局部变量和全局变量',
    context: '局部限于函数内，全局可多函数用，有不同作用域和生命周期',
    hierarchy: 4,
    difficulty: 4,
    topicId: null,
  },
  {
    id: 10059,
    sectionId: 7,
    sectionName: '函数',
    pointId: 8,
    pointName: '静态变量',
    context: '用 static 修饰，只初始化一次，程序运行期一直存在，保存状态',
    hierarchy: 3,
    difficulty: 4,
    topicId: null,
  },
  {
    id: 10060,
    sectionId: 7,
    sectionName: '函数',
    pointId: 9,
    pointName: '内部函数和外部函数',
    context: '内部用 static 修饰，仅本文件可用，外部可跨文件调用',
    hierarchy: 3,
    difficulty: 4,
    topicId: null,
  },
  {
    id: 10061,
    sectionId: 8,
    sectionName: '指针',
    pointId: 1,
    pointName: '指针的概念',
    context: '指针变量存储内存地址，可间接访问和操作对应内存数据',
    hierarchy: 2,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10062,
    sectionId: 8,
    sectionName: '指针',
    pointId: 2,
    pointName: '指针变量定义',
    context: '类型 *指针名; 形式定义，明确指向的数据类型，如 int *p;',
    hierarchy: 2,
    difficulty: 1,
    topicId: null,
  },
  {
    id: 10063,
    sectionId: 8,
    sectionName: '指针',
    pointId: 3,
    pointName: '指针初始化和赋值',
    context: '初始化为变量地址或后续赋值，建立指针与数据的关联',
    hierarchy: 3,
    difficulty: 4,
    topicId: null,
  },
  {
    id: 10064,
    sectionId: 8,
    sectionName: '指针',
    pointId: 4,
    pointName: '指针运算',
    context: '支持加减整数运算，可移动指针指向不同位置元素，方便数据处理',
    hierarchy: 5,
    difficulty: 5,
    topicId: null,
  },
  {
    id: 10065,
    sectionId: 8,
    sectionName: '指针',
    pointId: 5,
    pointName: '指针与数组',
    context: '数组名是首元素地址，指针可灵活访问数组元素，操作更高效',
    hierarchy: 3,
    difficulty: 4,
    topicId: null,
  },
  {
    id: 10066,
    sectionId: 8,
    sectionName: '指针',
    pointId: 6,
    pointName: '指针与函数参数',
    context: '传指针可修改实参，实现函数间数据的双向传递和共享',
    hierarchy: 4,
    difficulty: 5,
    topicId: null,
  },
  {
    id: 10067,
    sectionId: 8,
    sectionName: '指针',
    pointId: 7,
    pointName: '指针函数',
    context: '返回值为指针的函数，可返回动态分配内存或数组首地址等',
    hierarchy: 3,
    difficulty: 4,
    topicId: null,
  },
  {
    id: 10068,
    sectionId: 8,
    sectionName: '指针',
    pointId: 8,
    pointName: '函数指针',
    context: '指向函数的指针，可通过它调用函数，实现回调机制和动态调用',
    hierarchy: 3,
    difficulty: 5,
    topicId: null,
  },
  {
    id: 10069,
    sectionId: 8,
    sectionName: '指针',
    pointId: 9,
    pointName: '指针数组',
    context: '数组元素为指针，可存储多个地址，常用于处理字符串数组等',
    hierarchy: 4,
    difficulty: 3,
    topicId: null,
  },
  {
    id: 10070,
    sectionId: 8,
    sectionName: '指针',
    pointId: 10,
    pointName: '多级指针',
    context: '指针指向另一个指针，可实现多层间接访问，灵活管理内存',
    hierarchy: 5,
    difficulty: 5,
    topicId: null,
  },
  {
    id: 10071,
    sectionId: 9,
    sectionName: '结构体和共用体',
    pointId: 1,
    pointName: '结构体定义',
    context: '用 struct 定义自定义数据类型，组合不同类型成员，如 struct S',
    hierarchy: 5,
    difficulty: 4,
    topicId: null,
  },
  {
    id: 10072,
    sectionId: 9,
    sectionName: '结构体和共用体',
    pointId: 2,
    pointName: '结构体变量定义和初始化',
    context: '定义结构体后定义变量，可初始化成员值，如 struct S s={...}',
    hierarchy: 3,
    difficulty: 4,
    topicId: null,
  },
  {
    id: 10073,
    sectionId: 9,
    sectionName: '结构体和共用体',
    pointId: 3,
    pointName: '结构体成员访问',
    context: '用 . 运算符访问成员，清晰操作结构体内部不同类型数据',
    hierarchy: 4,
    difficulty: 4,
    topicId: null,
  },
  {
    id: 10074,
    sectionId: 9,
    sectionName: '结构体和共用体',
    pointId: 4,
    pointName: '结构体数组',
    context: '数组元素为结构体，可批量存储和处理多个结构体数据',
    hierarchy: 3,
    difficulty: 3,
    topicId: null,
  },
  {
    id: 10075,
    sectionId: 9,
    sectionName: '结构体和共用体',
    pointId: 5,
    pointName: '结构体指针',
    context: '指向结构体的指针，用 -> 访问成员，方便传递和操作结构体',
    hierarchy: 2,
    difficulty: 3,
    topicId: null,
  },
  {
    id: 10076,
    sectionId: 9,
    sectionName: '结构体和共用体',
    pointId: 6,
    pointName: '共用体定义',
    context: '用 union 定义，成员共享内存空间，节省内存，如 union U',
    hierarchy: 4,
    difficulty: 4,
    topicId: null,
  },
  {
    id: 10077,
    sectionId: 9,
    sectionName: '结构体和共用体',
    pointId: 7,
    pointName: '共用体特点',
    context: '同一时间仅一个成员有效，修改成员影响其他成员存储内容',
    hierarchy: 3,
    difficulty: 4,
    topicId: null,
  },
  {
    id: 10078,
    sectionId: 9,
    sectionName: '结构体和共用体',
    pointId: 8,
    pointName: '枚举类型定义',
    context: '用 enum 定义常量集合，赋予常量有意义名字，如 enum E',
    hierarchy: 2,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10079,
    sectionId: 9,
    sectionName: '结构体和共用体',
    pointId: 9,
    pointName: '枚举常量值',
    context: '默认从 0 递增，可手动指定，便于代码可读性和维护',
    hierarchy: 4,
    difficulty: 3,
    topicId: null,
  },
  {
    id: 10080,
    sectionId: 9,
    sectionName: '结构体和共用体',
    pointId: 10,
    pointName: '类型定义',
    context: '用 typedef 为已有类型定义新名，简化复杂类型书写',
    hierarchy: 3,
    difficulty: 4,
    topicId: null,
  },
  {
    id: 10081,
    sectionId: 10,
    sectionName: '文件操作',
    pointId: 1,
    pointName: '文件的概念',
    context: '文件的分类（文本文件和二进制文件），文件指针的定义',
    hierarchy: 2,
    difficulty: 2,
    topicId: null,
  },
  {
    id: 10082,
    sectionId: 10,
    sectionName: '文件操作',
    pointId: 2,
    pointName: '文件的打开和关闭',
    context:
      'fopen()函数用于打开文件，指定打开模式（如r、w、a等），fclose()函数用于关闭文件',
    hierarchy: 3,
    difficulty: 3,
    topicId: null,
  },
  {
    id: 10083,
    sectionId: 10,
    sectionName: '文件操作',
    pointId: 3,
    pointName: '文件的读写操作',
    context:
      '字符读写函数fgetc()和fputc()，字符串读写函数fgets()和fputs()，格式化读写函数fscanf()和fprintf()，二进制读写函数fread()和fwrite()',
    hierarchy: 2,
    difficulty: 3,
    topicId: null,
  },
  {
    id: 10084,
    sectionId: 10,
    sectionName: '文件操作',
    pointId: 4,
    pointName: '文件的定位操作',
    context:
      'fseek()函数用于移动文件指针的位置，ftell()函数用于返回文件指针的当前位置，rewind()函数用于将文件指针重新定位到文件开头',
    hierarchy: 4,
    difficulty: 5,
    topicId: null,
  },
]

// 题库
export const know_topics = [
  {
    id: 10001,
    sectionId: 1,
    knowId: 1,
    topicId: 1,
  },
  {
    id: 10002,
    sectionId: 1,
    knowId: 2,
    topicId: 1,
  },
]

export const plan = [
  {
    id: 10001,
    stuId: 100001,
    sectionId: 2,
    knowId: 4,
    knowState: 2,
    sectionState: 2,
    expertly: 0,
  },
]

export const topic = [
  {
    id: 10001,
    sectionId: 2,
    knowId: 3,
    context: 'ggggg',
  },
]

export const topic_plans = [
  {
    id: 10001,
    stuId: 10001,
    topicId: 1,
    state: 0,
  },
]
